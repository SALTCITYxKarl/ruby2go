/* Generated by Opal 0.10.1 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var TMP_3, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $module = Opal.module;

  Opal.add_stubs(['$map', '$to_proc', '$flatten', '$-', '$length', '$==', '$+', '$[]', '$new', '$raise', '$read']);
  this.reset = function () {
  // Flush previous input
  delete $gvars.input00030879566461206043;
};
  (function($base, $super) {
    function $Input00035400510227256987(){};
    var self = $Input00035400510227256987 = $klass($base, $super, 'Input00035400510227256987', $Input00035400510227256987);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    def.lines = def.index = def.count = nil;
    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(lines) {
      var $a, $b, self = this;

      self.lines = ($a = ($b = lines.$flatten()).$map, $a.$$p = "to_s".$to_proc(), $a).call($b);
      self.count = $rb_minus(self.lines.$length(), 1);
      return self.index = -1;
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$read', TMP_2 = function ːread() {
      var self = this;

      if (self.index['$=='](self.count)) {
        return nil};
      return $rb_plus(self.lines['$[]'](self.index = $rb_plus(self.index, 1)), "\n");
    }, TMP_2.$$arity = 0), nil) && 'read';
  })($scope.base, null);
  Opal.defn(Opal.Object, '$with_input', TMP_3 = function ːwith_input($a_rest) {
    var self = this, args;

    var $args_len = arguments.length, $rest_len = $args_len - 0;
    if ($rest_len < 0) { $rest_len = 0; }
    args = new Array($rest_len);
    for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
      args[$arg_idx - 0] = arguments[$arg_idx];
    }
    return $gvars.input00030879566461206043 = $scope.get('Input00035400510227256987').$new(args);
  }, TMP_3.$$arity = -1);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_4;

    Opal.defn(self, '$gets', TMP_4 = function ːgets($a_rest) {
      var $b, self = this;
      if ($gvars.input00030879566461206043 == null) $gvars.input00030879566461206043 = nil;

      if ((($b = $gvars.input00030879566461206043) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else {
        self.$raise("No data available to read.")
      };
      return $gvars._ = $gvars.input00030879566461206043.$read();
    }, TMP_4.$$arity = -1)
  })($scope.base);
})(Opal);
